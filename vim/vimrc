
set title
set number
set relativenumber


"===== [ switch back and forth between vim windows ] ===========
map tt <C-W>w

"===== [ map window adjust to +(-) ] ===========
map - <C-W><
map = <C-W>>

"===== [ fzf ] ===========
set rtp+=/opt/local/share/fzf/vim
nnoremap <C-f> :Files<Cr>

"============[ matplotlib colors ] ================
set complete+=k~/.vim/matplotlib/matplotlib.txt"


"======[auto reload]=======
"autocmd! bufwritepost ~/.vimrc source % 

"======[ better clipboard] =======
set clipboard=unnamed

let g:latex_to_unicode_file_types = ".*"

"===== [ smarter tab ] ===========
function! InsertTabWrapper()
	let col = col('.') - 1
	if !col || getline('.')[col - 1] !~ '\k'
		return "\<TAB>"
	else
		return "\<C-p>"
	endif
endfunction

inoremap <expr> <TAB> InsertTabWrapper()

"===== [ never press Shift+; again] ===========
nnoremap ; :
nnoremap : ;

vnoremap ; :
vnoremap : ;

"===== [ syntax Highlighting] ===========
"[generic]
syntax on
colorscheme peachpuff
highlight Comment cterm=bold ctermfg=LightGreen
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

"[ python format ]
function! SetupPython()
	syntax on
	colorscheme gruvbox
	"highlight Comment cterm=bold ctermfg=LightGreen
	"highlight LineNr ctermfg=white
endfunction

"[ Julia format ]
function! SetupJulia()
	set softtabstop=4           " Determines the behaviour of TAB and BACKSPACE keys with expandtab.
	set tabstop=4               " Sets tabstops to a width of four columns.
	set shiftwidth=4            " Determines the results of >>, <<, and ==.
	setlocal expandtab          " Replaces tabs with spaces.
	syntax on
	colorscheme gruvbox
	"highlight Comment cterm=bold ctermfg=LightGreen
	"highlight LineNr ctermfg=white
endfunction

function! SetupFortran()
	let fortran_free_source=1
	let fortran_do_enddo=1
	filetype plugin indent on
	syntax on

	" Turn on line numbers and
	" row/column numbers
	set nu
	set ruler

	" Make vim echo commands as they
	" are being entered.
	set showcmd

	" Set tabstops to two spaces
	" and ensure tab characters are
	" expanded into spaces.
	set smarttab
	set expandtab
	set tabstop=2
	set shiftwidth=2

	" Fix backspace key
	set bs=2

	" Set up searching so
	" that it jumps to matches
	" as the word is being
	" entered and is case-insensitive
	set incsearch
	set ignorecase
	set smartcase
	"colorscheme gruvbox
	"highlight Comment cterm=bold ctermfg=LightGreen
	"highlight LineNr ctermfg=white
endfunction

"===== [ next/previous buffer ] ===========
nnoremap <C-n> :bn<CR>
nnoremap <C-p> :bp<CR>

"===== [ highlight search color ] ===========
set hlsearch


"===== [ map go to open files underneath the cursor ] ===========
nnoremap go :!open <cfile><CR>

"===== [ make 81st column stand out ] ===========
"Courtsey Damain Conway : https://www.youtube.com/watch?v=aHm36-na4-4
highlight ColorColumn ctermbg=NONE


"==========[ spell checking ] =====================
"spell check only if its a file that I care to get the words
"spelled correctly in

set spelllang=en
"highlight SpellBad cterm=bold ctermfg=red ctermbg=black
"augroup DiffSpellCheck
"	autocmd!
"	autocmd BufEnter *.md,*.tex set spell
"augroup END

"==========[ Make a new file without worrying ] =====================
function! AskQuit (msg, options, quit_option)
	if confirm(a:msg, a:options) == a:quit_option
		silent q!
	endif
endfunction

function! EnsureDirExists ()
	let required_dir = expand("%:h")
	if !isdirectory(required_dir)
		call AskQuit("Parent directory '" . required_dir . "' doesn't exist.",
		     \       "&Create it\nor &Quit?", 2)
		try
			call mkdir( required_dir, 'p' )
		catch
			call AskQuit("Can't create '" . required_dir . "'",
			     \       "&Quit\nor &Continue anyway?", 1)
		endtry
	endif
endfunction

augroup AutoMkdir
	autocmd!
	autocmd BufNewFile * :call EnsureDirExists()
augroup END


"===== [ Tabularize mapping ] ===========
if exists(":Tabularize")
	vnoremap ee = :Tabularize /=<CR>
endif


"============== [ ALE ] ==================
"highlight AleErrorLine      cterm=bold  ctermfg=red 
"highlight AleWarningLine    cterm=bold  ctermfg=magenta
"let g:ale_enabled                    = 0
"let g:ale_set_loclist 		     = 0
"let g:ale_set_quickfix		     = 1
"let g:ale_set_signs		     = 0
"let g:ale_linters = {
"""		\ 'python' : ['flake8'], 
"		\     'latex'  : ['chktex'],
"		\     'tex'    : ['all']
"		\}
"let g:ale_python_flake8_options = '--ignore=E221,E226,E251,E265,E266,E501'
"================== [ AIRLINE ] =================
"let g:airline#extensions#ale#enabled = 1
"let g:airline_theme = "github"
let g:airline_theme = "monochrome"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
"============== [ vim-plug ] ==================
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')
Plug 'JuliaEditorSupport/julia-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'christoomey/vim-tmux-navigator'
"Plug 'dense-analysis/ale'
"Plug 'cormacrelf/vim-colors-github'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-fugitive'
Plug 'morhetz/gruvbox'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'lervag/vimtex'
"Plug 'turbio/bracey.vim'
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

"======[set backgroun dark makes tmux pretty]=======
"set background=dark
"syntax off
